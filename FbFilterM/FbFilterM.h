//Фильтр медианный.
//       DbFilterM
//    +-------------+
//    |  FbFilterM  |
// ->-|In        Out|->-
//   -|Size         |
//   -|Ts_in        |
//   -|Ts_ms        |
//   -|Reset        |
//    +-------------+
/*
  Пример вызова программы.
  static struct DbFilterM DbFilterM1 = {0};
  DbFilterM1.In    = 0.0          ; //Входной сигнал до фильтрации.
  DbFilterM1.Size  = 10           ; //Размер массива для сортировки (Количество выборок).
  DbFilterM1.Ts_in = 2000         ; //Время между выборками и сортировками для входа In [мс].
  DbFilterM1.Ts_ms = 100          ; //Шаг дискретизации по времени [мс].
  DbFilterM1.Reset = false        ; //Сброс при перезагрузке.
  FbFilterM(&DbFilterM1)          ; //Фильтр медианный.
  //              = DbFilterM1.Out; //Выходной сигнал (середина отсортированного массива).
*/

#pragma once

#ifdef __cplusplus
extern "C"
{
#endif

struct DbFilterM
{
  //Входные переменные, сохраняемые.
  float    In   ; //Входной сигнал до фильтрации.
  uint16_t Size ; //Размер массива для сортировки (Количество выборок).
  uint32_t Ts_in; //Время между выборками и сортировками для входа In [мс].
  uint32_t Ts_ms; //Шаг дискретизации по времени [мс].
  bool     Reset; //Сброс при перезагрузке.
  //Выходные переменные, сохраняемые.
  float Out; //Выходной сигнал (середина отсортированного массива).
  //Внутренние переменные, сохраняемые.
  float InputArray[8]; //Массив входных значений для сортировки.
  uint16_t TimeArray[8]; //Массив времени жизни элемента 0-самый молодой 1-старше 2- еще старше.
};

void FbFilterM(struct DbFilterM *p);

#ifdef __cplusplus
}
#endif
